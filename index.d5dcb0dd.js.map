{"mappings":"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","sources":["src/js/module1.js","src/js/module2.js","src/js/weatherApi.js","src/js/DomManipulation.js","src/js/utils.js","src/js/app.js","src/js/appLocalStorage.js"],"sourcesContent":["console.log('module1');","console.log('module2');","const URL_BASE = 'https://metaweather-api.glitch.me/';\n\n /**\n *  The fetch method that sends queries, returns data after receiving a response. On failure, an error is returned.\n *  \n * @param {String} urlEndpoint is a expansion of the underlying query \"URL_BASE\"\n * @return {JSON} json object with info\n */\nconst fetchData = async (urlEndpoint) => {\n  try {\n    const response = await fetch(`${URL_BASE}${urlEndpoint}`);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong');\n    }\n\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default class WeatherAPI {\n\n  /**\n  *  The method queries the API through query and returns data such as: city, id, longitude and latitude\n  *  \n  * @param {String} name means query in the form of a city name\n  * @return {JSON} json object with info: city, id, longitude and latitude \n  */\n  async getQueryLocations(name) {\n    const apiEndpoint = `/api/location/search/?query=${name}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n\n  /**\n  *  The method queries the API through locationID and returns info about the weather in real time\n  *  \n  * @param {Number} id means the specific locationID\n  * @return {JSON} json object with info about the weather\n  */\n  async getWeatherData(id) {\n    const apiEndpoint = `/api/location/${id}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n  \n  /**\n  *  The method queries the API through locationID and data returns info about the historical weather \n  *  \n  * @param {Number} id means the specific locationID\n  * @param {String} date in format 'YYYY/MM/DD'\n  * @return {JSON} json object with info about the historical weather\n  */\n  async getHistoricalWeatherData(id, date) {\n    const apiEndpoint = `/api/location/${id}/${date}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n}\n","export default class DomManipulation {\n  /**\n   * Sets 'this.elem' to an element with corresponding ID\n   * of the instantiated object.\n   * @param {string} elemID\n   */\n  constructor(elemID) {\n    this.elem = document.getElementById(elemID);\n  }\n\n  setText(text) {\n    this.elem.innerText = text;\n  }\n\n  setImage(imgPath) {\n    this.elem.src = imgPath;\n  }\n\n  /**\n   * Transforms the wind direction icon to\n   * reflect the wind direction data.\n   * @param {Number} direction\n   */\n  setWindIcon(direction) {\n    this.elem.style.transform = `rotate(${direction}deg)`;\n  }\n\n  /**\n   * Creates and sets options for selected element (eg. 'datalist')\n   * based on the items array 'title' property.\n   * @param {Array} itemList\n   */\n  setDatalistChildren(itemList) {\n    this.elem.innerHTML = '';\n\n    itemList.forEach((item) => {\n      const option = document.createElement('option');\n      option.value = item.title;\n      option.dataset.woeid = item.woeid;\n      this.elem.append(option);\n    });\n  }\n\n  /**\n   * Method responsible for hiding/showing elements,\n   * will be used to swap layouts.\n   */\n  toggleDisplay() {\n    this.elem.style.display =\n      this.elem.style.display === 'none' ? 'flex' : 'none';\n  }\n  reset() {\n    this.elem.value = '';\n  }\n}\n","/**\n * search form - related\n */\n\nimport WeatherAPI from './weatherApi';\nimport DomManipulation from './DomManipulation';\n\n/**\n * variable for easier manipulation of inputStatus\n */\nexport const INPUT_STATES = {\n  standby: 'standby',\n  error: 'error',\n  ready: 'ready',\n  loading: 'loading',\n  reload: 'reload',\n};\n\n/**\n * function verifies if the phrase in the input field matches some of the locations from API\n *\n * @param {array} cityList - array of locations given as a response from API\n * @param {DOM element} input - input which is currently being used in the app\n * @returns 'true' (if verification is positive) else 'false'\n */\nexport const verifyInput = (cityList, input) => {\n  const cityMatch = cityList.find(\n    ({ title }) => title.toLowerCase() === input.value.toLowerCase(),\n  );\n\n  if (cityMatch) {\n    input.dataset.currentWoeid = cityMatch.woeid; // setting 'dataset.currentWoeid' at input\n    input.dataset.currentCity = cityMatch.title; // setting 'dataset.currentCity' at input\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * function for updating icons in the search form\n *\n * @param {DOM element} searchBar - current search form which is being used in the app\n * @param {String} status - current input status ('standby', 'loading', etc.)\n */\nexport const updateSearchFormDisplay = (searchBar, status) => {\n  const icons = [...searchBar.querySelector('.search-icon-container').children];\n\n  icons.forEach((icon) => {\n    icon.classList.remove('active');\n  });\n\n  switch (status) {\n    case 'standby':\n      const standbyIcon = searchBar.querySelector('.fa-search');\n      standbyIcon.classList.add('active');\n\n      break;\n    case 'loading':\n      const loadingIcon = searchBar.querySelector('.lds-spinner');\n      loadingIcon.classList.add('active');\n\n      break;\n    case 'error':\n      const errorIcon = searchBar.querySelector('.fa-exclamation');\n      errorIcon.classList.add('active');\n\n      break;\n    case 'ready':\n      const readyIcon = searchBar.querySelector('.fa-check');\n      readyIcon.classList.add('active');\n\n      break;\n    case 'reload':\n      const reloadIcon = searchBar.querySelector('.fa-redo');\n      reloadIcon.classList.add('active');\n\n      break;\n    default:\n      console.log('unexpected input');\n  }\n};\n\n// debounce function\n// Originally inspired by  David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// `wait` milliseconds.\nexport const debounce = (func, wait) => {\n  let timeout;\n\n  return function execFunc(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\nexport let inputStatus = INPUT_STATES.standby;\nconst weather = new WeatherAPI();\n\n/**\n * function validate input phrase, manage search form updating and sends request to API\n *\n * @param {Object} e - DOM event object\n * @returns nothing\n */\n\nexport const handleInput = async (e) => {\n  const currentInput = e.target;\n  const currentSearchBar = e.target.closest('form');\n  const currentSearchInfo = currentSearchBar.querySelector(\n    '.search-info-container p',\n  );\n\n  currentSearchInfo.innerText = '';\n\n  if (!e.target.value) {\n    inputStatus = INPUT_STATES.standby;\n    updateSearchFormDisplay(currentSearchBar, inputStatus);\n    return;\n  }\n\n  inputStatus = INPUT_STATES.loading;\n  updateSearchFormDisplay(currentSearchBar, inputStatus);\n\n  try {\n    const res = await weather.getQueryLocations(e.target.value);\n    if (res.length < 1) {\n      console.log('No locations found');\n      inputStatus = INPUT_STATES.error;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n      currentSearchInfo.innerText = 'No results';\n\n      return;\n    }\n\n    const dataList = new DomManipulation('results');\n    dataList.setDatalistChildren(res);\n\n    if (verifyInput(res, currentInput)) {\n      inputStatus = INPUT_STATES.ready;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n    } else {\n      inputStatus = INPUT_STATES.standby;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n    }\n  } catch (error) {\n    inputStatus = INPUT_STATES.reload;\n    updateSearchFormDisplay(currentSearchBar, inputStatus);\n    currentSearchInfo.innerText = 'Try again';\n  }\n};\n\nexport const clearInputBtn = (e) => {\n  const form = e.target.closest('form');\n  const input = form.querySelector('input');\n  const searchInfo = form.querySelector('.search-info-container p');\n\n  input.value = '';\n  inputStatus = INPUT_STATES.standby;\n  updateSearchFormDisplay(form, inputStatus);\n  searchInfo.innerText = '';\n};\n\n/**\n * function for reseting both forms\n * needs to be invoked whenever the app view changes\n */\nexport const resetForms = () => {\n  const homeSearchInput = new DomManipulation('home-input');\n  const dailySearchInput = new DomManipulation('daily-input');\n  homeSearchInput.reset();\n  dailySearchInput.reset();\n\n  inputStatus = INPUT_STATES.standby;\n  updateSearchFormDisplay(homeSearchBar, inputStatus);\n  updateSearchFormDisplay(dailySearchBar, inputStatus);\n};\n\n// screen switch\nexport const screenSwitch = async (locationID) => {\n  const homeView = new DomManipulation('home-view');\n  const searchView = new DomManipulation('search-view');\n\n  weather.getWeatherData(locationID).then((weatherData) => {\n    console.log(weatherData);\n    homeView.toggleDisplay();\n    searchView.toggleDisplay();\n  });\n};\n","import './module1';\nimport './module2';\nimport WeatherAPI from './weatherApi';\nimport AppLocalStorage from './appLocalStorage';\nimport DomManipulation from './DomManipulation';\nimport {\n  handleInput,\n  debounce,\n  INPUT_STATES,\n  inputStatus,\n  updateSearchFormDisplay,\n  clearInputBtn,\n  resetForms,\n  screenSwitch,\n} from './utils';\n\nconst weather = new WeatherAPI();\nconst localStorage = new AppLocalStorage();\n\nconst homeSearchBar = document.querySelector('.home-search-bar');\nconst dailySearchBar = document.querySelector('.daily-search-bar');\n\nconst homeSearchInput = new DomManipulation('home-input');\nconst dailySearchInput = new DomManipulation('daily-input');\n\nconst homeView = new DomManipulation('home-view');\nconst searchView = new DomManipulation('search-view');\n\nconst clearBtns = document.querySelectorAll('.fa-times');\nconst reloadBtns = document.querySelectorAll('.fa-redo');\n\nsearchView.toggleDisplay();\n\nupdateSearchFormDisplay(homeSearchBar, inputStatus);\n\n/**\n * function checks if the input is OK and proceeds with the further actions for displaying weather\n *\n * @param {Object} e - DOM event object\n * @returns nothing\n */\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  if (inputStatus !== INPUT_STATES.ready) return;\n\n  let input = this.getElementsByTagName('input')[0];\n  screenSwitch(input.dataset.currentWoeid);\n}\n\n/**\n * event listeners for the search form on the home page\n */\nhomeSearchInput.elem.addEventListener('input', debounce(handleInput, 1500));\nhomeSearchBar.addEventListener('submit', handleSubmit);\n\n/**\n * event listeners for the search form on the datails page\n */\ndailySearchInput.elem.addEventListener('input', debounce(handleInput, 1500));\ndailySearchBar.addEventListener('submit', handleSubmit);\n\n/**\n * event listeners for clearing the input values after clicking the proper icon\n */\nclearBtns.forEach((btn) => {\n  btn.addEventListener('click', clearInputBtn);\n});\n\n/**\n * event listeners for reloading the page after clicking the proper icon\n */\nreloadBtns.forEach((btn) => {\n  btn.addEventListener('click', () => {\n    console.log('reload');\n\n    //the event needs to be handled with router functionalities\n    //the app needs to reload now\n  });\n});\n","export default class AppLocalStorage {\n  /**\n  *  Method that allows to add an element to the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to add\n  * @param {String} value is a value we want to add\n  */\n  set(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      //\n    }\n  }\n\n  /**\n  *  Method that allows to get an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to get\n  * @return {String} the current value associated with the given key, or null if the given key does not exist.\n  */\n  get(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      //\n    }\n    return null;\n  }\n\n  /**\n  *  Method that allows to remove an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to remove\n  */\n  remove(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      //\n    }\n  }\n}\n"],"names":["console","log","$5131289cb623a25c$var$fetchData","async","urlEndpoint","response","fetch","ok","Error","json","error","$5131289cb623a25c$export$2e2bcd8739ae039","name","apiEndpoint","id","id1","date","$af34c7bb6fef930c$export$2e2bcd8739ae039","setText","text","this","elem","innerText","setImage","imgPath","src","setWindIcon","direction","style","transform","setDatalistChildren","itemList","innerHTML","forEach","item","option","document","createElement","value","title","dataset","woeid","append","toggleDisplay","display","reset","constructor","elemID","getElementById","$fe8af8a42c4a74bc$export$1482df4e2e8d1d5d","$fe8af8a42c4a74bc$export$3679f369258b0974","searchBar","status","querySelector","children","icon","classList","remove","add","$fe8af8a42c4a74bc$export$61fc7d43ac8f84b0","func","wait","timeout","args","clearTimeout","setTimeout","$fe8af8a42c4a74bc$export$a937bd8c76bf8790","$fe8af8a42c4a74bc$var$weather","$fe8af8a42c4a74bc$export$412508d679148d5c","e","currentInput","target","currentSearchBar","closest","currentSearchInfo","res","getQueryLocations","length","cityList","input","cityMatch","find","toLowerCase","currentWoeid","currentCity","$fe8af8a42c4a74bc$export$25b84c447cb753a4","$fe8af8a42c4a74bc$export$77934e1dad786cc1","form","searchInfo","$ce77af30fc9a6e63$var$homeSearchBar","set","key","localStorage","setItem","get","key1","getItem","key2","removeItem","$ce77af30fc9a6e63$var$dailySearchBar","$ce77af30fc9a6e63$var$homeSearchInput","$ce77af30fc9a6e63$var$dailySearchInput","$ce77af30fc9a6e63$var$searchView","$ce77af30fc9a6e63$var$clearBtns","querySelectorAll","$ce77af30fc9a6e63$var$reloadBtns","$ce77af30fc9a6e63$var$handleSubmit","preventDefault","locationID","homeView","searchView","getWeatherData","then","weatherData","$fe8af8a42c4a74bc$export$5503881af798ffe5","getElementsByTagName","addEventListener","btn"],"version":3,"file":"index.d5dcb0dd.js.map"}