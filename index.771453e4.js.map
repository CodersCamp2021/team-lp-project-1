{"mappings":"AAAAA,QAAQC,IAAI,WCAZD,QAAQC,IAAI,WCAZ,MAQMC,EAASC,MAAUC,IACvB,IACE,MAAMC,QAAiBC,MAAK,qCAAeF,KAE3C,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,wBAKlB,aAFmBH,EAASI,OAG5B,MAAOC,GACPV,QAAQC,IAAIS,WCpBKC,EAUnBC,QAAQC,GACNC,KAAKC,KAAKC,UAAYH,EAGxBI,SAASC,GACPJ,KAAKC,KAAKI,IAAMD,EAQlBE,YAAYC,GACVP,KAAKC,KAAKO,MAAMC,UAAS,UAAaF,QAQxCG,oBAAoBC,GAClBX,KAAKC,KAAKW,UAAY,GAEtBD,EAASE,SAASC,IAChB,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQJ,EAAKK,MACpBJ,EAAOK,QAAQC,MAAQP,EAAKO,MAC5BrB,KAAKC,KAAKqB,OAAOP,MAQrBQ,gBACEvB,KAAKC,KAAKO,MAAMgB,QACc,SAA5BxB,KAAKC,KAAKO,MAAMgB,QAAqB,QAAU,OA5ChDC,YACSC,GACV1B,KAAKC,KAAOe,SAASW,eAAeD,ICDxC,MAAME,EAAU,UFyBZvC,wBACsBwC,GACtB,MAAMC,EAAW,+BAAkCD,IAInD,aAFmBzC,EAAU0C,GAU7BzC,qBACmB0C,GACnB,MAAMD,EAAW,iBAAoBC,IAIrC,aAFmB3C,EAAU0C,GAW7BzC,+BAC6B2C,EAAIC,GACjC,MAAMH,EAAW,iBAAoBE,KAAMC,IAI3C,aAFmB7C,EAAU0C,KEvD3BI,GAFe,UCAnBC,IAAIC,EAAKlB,GACP,IACEmB,aAAaC,QAAQF,EAAKlB,GAC1B,MAAOqB,KAWXC,IAAIC,GACF,IACE,OAAOJ,aAAaK,QAAQD,GAC5B,MAAOF,IAGT,OAAO,KAQTI,OAAOC,GACL,IACEP,aAAaQ,WAAWD,GACxB,MAAOL,OD7BO,IAAI1C,EAAgB,eAClCiD,EAAW,IAAIjD,EAAgB,aAC/BkD,EAAa,IAAIlD,EAAgB,eACjCmD,EAAW,IAAInD,EAAgB,WAErCkD,EAAWxB,gBA6BXW,EAAYjC,KAAKgD,iBAAiB,QArBpB,EAAIC,EAAMC,KACtB,IAAIC,EAEJ,OAAO,YAAqBC,GAK1BC,aAAaF,GACbA,EAAUG,YALC,KACTD,aAAaF,GACbF,KAAQG,KAGkBF,KAYWK,EAR1BnE,MAAUkD,IACzB,GAAIA,EAAEkB,OAAOvC,OAAmB,UAAVqB,EAAEH,IAAiB,CACvC,MAAMsB,QAAY9B,EAAQ+B,kBAAkBpB,EAAEkB,OAAOvC,OACrDhC,QAAQC,IAAIuE,GACZV,EAAStC,oBAAoBgD,MAIgC,MAIjExB,EAAYjC,KAAKgD,iBAAiB,SAAUV,IAC5B,UAAVA,EAAEH,MACJlD,QAAQC,IAAI6D,EAAS/C,KAAK2D,SAAS,GAAGxC,QAAQC,OAC9CwC,EAAab,EAAS/C,KAAK2D,SAAS,GAAGxC,QAAQC,WAInD,MAAMwC,EAAYxE,MAAUyE,IAC1BlC,EAAQmC,eAAeD,GAAYE,MAAMC,IACvC/E,QAAQC,IAAI8E,GACZnB,EAASvB,gBACTwB,EAAWxB","sources":["src/js/module1.js","src/js/module2.js","src/js/weatherApi.js","src/js/DomManipulation.js","src/js/app.js","src/js/appLocalStorage.js"],"sourcesContent":["console.log('module1');","console.log('module2');","const URL_BASE = 'https://metaweather-api.glitch.me/';\n\n /**\n *  The fetch method that sends queries, returns data after receiving a response. On failure, an error is returned.\n *  \n * @param {String} urlEndpoint is a expansion of the underlying query \"URL_BASE\"\n * @return {JSON} json object with info\n */\nconst fetchData = async (urlEndpoint) => {\n  try {\n    const response = await fetch(`${URL_BASE}${urlEndpoint}`);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong');\n    }\n\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default class WeatherAPI {\n\n  /**\n  *  The method queries the API through query and returns data such as: city, id, longitude and latitude\n  *  \n  * @param {String} name means query in the form of a city name\n  * @return {JSON} json object with info: city, id, longitude and latitude \n  */\n  async getQueryLocations(name) {\n    const apiEndpoint = `/api/location/search/?query=${name}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n\n  /**\n  *  The method queries the API through locationID and returns info about the weather in real time\n  *  \n  * @param {Number} id means the specific locationID\n  * @return {JSON} json object with info about the weather\n  */\n  async getWeatherData(id) {\n    const apiEndpoint = `/api/location/${id}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n  \n  /**\n  *  The method queries the API through locationID and data returns info about the historical weather \n  *  \n  * @param {Number} id means the specific locationID\n  * @param {String} date in format 'YYYY/MM/DD'\n  * @return {JSON} json object with info about the historical weather\n  */\n  async getHistoricalWeatherData(id, date) {\n    const apiEndpoint = `/api/location/${id}/${date}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n}\n","export default class DomManipulation {\n  /**\n   * Sets 'this.elem' to an element with corresponding ID\n   * of the instantiated object.\n   * @param {string} elemID\n   */\n  constructor(elemID) {\n    this.elem = document.getElementById(elemID);\n  }\n\n  setText(text) {\n    this.elem.innerText = text;\n  }\n\n  setImage(imgPath) {\n    this.elem.src = imgPath;\n  }\n\n  /**\n   * Transforms the wind direction icon to\n   * reflect the wind direction data.\n   * @param {Number} direction\n   */\n  setWindIcon(direction) {\n    this.elem.style.transform = `rotate(${direction}deg)`;\n  }\n\n  /**\n   * Creates and sets options for selected element (eg. 'datalist')\n   * based on the items array 'title' property.\n   * @param {Array} itemList\n   */\n  setDatalistChildren(itemList) {\n    this.elem.innerHTML = '';\n\n    itemList.forEach((item) => {\n      const option = document.createElement('option');\n      option.value = item.title;\n      option.dataset.woeid = item.woeid;\n      this.elem.append(option);\n    });\n  }\n\n  /**\n   * Method responsible for hiding/showing elements,\n   * will be used to swap layouts.\n   */\n  toggleDisplay() {\n    this.elem.style.display =\n      this.elem.style.display === 'none' ? 'block' : 'none';\n  }\n}\n","import './module1';\nimport './module2';\nimport WeatherAPI from './weatherApi';\nimport AppLocalStorage from './appLocalStorage';\nimport DomManipulation from './DomManipulation';\n\nconst weather = new WeatherAPI();\nconst localStorage = new AppLocalStorage();\n\nconst searchInput = new DomManipulation('home-input');\nconst homeView = new DomManipulation('home-view');\nconst searchView = new DomManipulation('search-view');\nconst dataList = new DomManipulation('results');\n\nsearchView.toggleDisplay();\n\n// debounce function\n// Originally inspired by  David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// `wait` milliseconds.\nconst debounce = (func, wait) => {\n  let timeout;\n\n  return function execFunc(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\nconst handleInput = async (e) => {\n  if (e.target.value && e.key !== 'Enter') {\n    const res = await weather.getQueryLocations(e.target.value);\n    console.log(res);\n    dataList.setDatalistChildren(res);\n  }\n};\n\nsearchInput.elem.addEventListener('keyup', debounce(handleInput, 500));\n\n// Provisional screen switcher - subject to change, made to allow\n// working on other features.\nsearchInput.elem.addEventListener('keyup', (e) => {\n  if (e.key === 'Enter') {\n    console.log(dataList.elem.children[0].dataset.woeid);\n    screenSwitch(dataList.elem.children[0].dataset.woeid);\n  }\n});\n\nconst screenSwitch = async (locationID) => {\n  weather.getWeatherData(locationID).then((weatherData) => {\n    console.log(weatherData);\n    homeView.toggleDisplay();\n    searchView.toggleDisplay();\n  });\n};\n","export default class AppLocalStorage {\n  /**\n  *  Method that allows to add an element to the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to add\n  * @param {String} value is a value we want to add\n  */\n  set(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      //\n    }\n  }\n\n  /**\n  *  Method that allows to get an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to get\n  * @return {String} the current value associated with the given key, or null if the given key does not exist.\n  */\n  get(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      //\n    }\n    return null;\n  }\n\n  /**\n  *  Method that allows to remove an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to remove\n  */\n  remove(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      //\n    }\n  }\n}\n"],"names":["console","log","$5131289cb623a25c$var$fetchData","async","urlEndpoint","response","fetch","ok","Error","json","error","$af34c7bb6fef930c$export$2e2bcd8739ae039","setText","text","this","elem","innerText","setImage","imgPath","src","setWindIcon","direction","style","transform","setDatalistChildren","itemList","innerHTML","forEach","item","option","document","createElement","value","title","dataset","woeid","append","toggleDisplay","display","constructor","elemID","getElementById","$ce77af30fc9a6e63$var$weather","name","apiEndpoint","id","id1","date","$ce77af30fc9a6e63$var$searchInput","set","key","localStorage","setItem","e","get","key1","getItem","remove","key2","removeItem","$ce77af30fc9a6e63$var$homeView","$ce77af30fc9a6e63$var$searchView","$ce77af30fc9a6e63$var$dataList","addEventListener","func","wait","timeout","args","clearTimeout","setTimeout","$ce77af30fc9a6e63$var$debounce","target","res","getQueryLocations","children","$ce77af30fc9a6e63$var$screenSwitch","locationID","getWeatherData","then","weatherData"],"version":3,"file":"index.771453e4.js.map"}