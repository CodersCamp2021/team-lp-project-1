{"mappings":"AAAAA,QAAQC,IAAI,WCAZD,QAAQC,IAAI,WCAZ,MAQMC,EAASC,MAAUC,IACvB,IACE,MAAMC,QAAiBC,MAAK,qCAAeF,KAE3C,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,wBAKlB,aAFmBH,EAASI,OAG5B,MAAOC,GACPV,QAAQC,IAAIS,KCfA,UD0BZP,wBACsBQ,GACtB,MAAMC,EAAW,+BAAkCD,IAInD,aAFmBT,EAAUU,GAU7BT,qBACmBU,GACnB,MAAMD,EAAW,iBAAoBC,IAIrC,aAFmBX,EAAUU,GAW7BT,+BAC6BW,EAAIC,GACjC,MAAMH,EAAW,iBAAoBE,KAAMC,IAI3C,aAFmBb,EAAUU,KC1DZ,UCCnBI,IAAIC,EAAKC,GACP,IACEC,aAAaC,QAAQH,EAAKC,GAC1B,MAAOG,KAWXC,IAAIC,GACF,IACE,OAAOJ,aAAaK,QAAQD,GAC5B,MAAOF,IAGT,OAAO,KAQTI,OAAOC,GACL,IACEP,aAAaQ,WAAWD,GACxB,MAAOL,OD9BbrB,QAAQC,IAAI","sources":["src/js/module1.js","src/js/module2.js","src/js/weather-api.js","src/js/app.js","src/js/app-local-storage.js"],"sourcesContent":["console.log('module1');","console.log('module2');","const URL_BASE = 'https://metaweather-api.glitch.me/';\n\n /**\n *  The fetch method that sends queries, returns data after receiving a response. On failure, an error is returned.\n *  \n * @param {String} urlEndpoint is a expansion of the underlying query \"URL_BASE\"\n * @return {JSON} json object with info\n */\nconst fetchData = async (urlEndpoint) => {\n  try {\n    const response = await fetch(`${URL_BASE}${urlEndpoint}`);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong');\n    }\n\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default class WeatherAPI {\n\n  /**\n  *  The method queries the API through query and returns data such as: city, id, longitude and latitude\n  *  \n  * @param {String} name means query in the form of a city name\n  * @return {JSON} json object with info: city, id, longitude and latitude \n  */\n  async getQueryLocations(name) {\n    const apiEndpoint = `/api/location/search/?query=${name}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n\n  /**\n  *  The method queries the API through locationID and returns info about the weather in real time\n  *  \n  * @param {Number} id means the specific locationID\n  * @return {JSON} json object with info about the weather\n  */\n  async getWeatherData(id) {\n    const apiEndpoint = `/api/location/${id}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n  \n  /**\n  *  The method queries the API through locationID and data returns info about the historical weather \n  *  \n  * @param {Number} id means the specific locationID\n  * @param {String} date in format 'YYYY/MM/DD'\n  * @return {JSON} json object with info about the historical weather\n  */\n  async getHistoricalWeatherData(id, date) {\n    const apiEndpoint = `/api/location/${id}/${date}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n}\n","import './module1';\nimport './module2';\nimport WeatherAPI from './weather-api';\nimport AppLocalStorage from './app-local-storage';\n\nconst weather = new WeatherAPI();\nconst localStorage = new AppLocalStorage();\n\nconsole.log('Hello world!');\n","export default class AppLocalStorage {\n  /**\n  *  Method that allows to add an element to the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to add\n  * @param {String} value is a value we want to add\n  */\n  set(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      //\n    }\n  }\n\n  /**\n  *  Method that allows to get an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to get\n  * @return {String} the current value associated with the given key, or null if the given key does not exist.\n  */\n  get(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      //\n    }\n    return null;\n  }\n\n  /**\n  *  Method that allows to remove an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to remove\n  */\n  remove(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      //\n    }\n  }\n}\n"],"names":["console","log","$4e060401454e86ac$var$fetchData","async","urlEndpoint","response","fetch","ok","Error","json","error","name","apiEndpoint","id","id1","date","set","key","value","localStorage","setItem","e","get","key1","getItem","remove","key2","removeItem"],"version":3,"file":"index.abd4dcf5.js.map"}