{"mappings":"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","sources":["src/js/weatherApi.js","src/js/appLocalStorage.js","src/js/DomManipulation.js","node_modules/@swc/helpers/src/_define_property.js","src/js/sessionStorage.js","src/js/router.js","src/js/utils.js","src/js/app.js"],"sourcesContent":["const URL_BASE = 'https://metaweather-api.glitch.me/';\n\n/**\n *  The fetch method that sends queries, returns data after receiving a response. On failure, an error is returned.\n *\n * @param {String} urlEndpoint is a expansion of the underlying query \"URL_BASE\"\n * @return {JSON} json object with info\n */\nconst fetchData = async (urlEndpoint) => {\n  try {\n    const response = await fetch(`${URL_BASE}${urlEndpoint}`);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong');\n    }\n\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default class WeatherAPI {\n  /**\n   *  The method queries the API through query and returns data such as: city, id, longitude and latitude\n   *\n   * @param {String} name means query in the form of a city name\n   * @return {JSON} json object with info: city, id, longitude and latitude\n   */\n  async getQueryLocations(name) {\n    const apiEndpoint = `/api/location/search/?query=${name}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n\n  /**\n   *  The method queries the API through locationID and returns info about the weather in real time\n   *\n   * @param {Number} id means the specific locationID\n   * @return {JSON} json object with info about the weather\n   */\n  async getWeatherData(id) {\n    const apiEndpoint = `/api/location/${id}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n\n  /**\n   *  The method queries the API through locationID and data returns info about the historical weather\n   *\n   * @param {Number} id means the specific locationID\n   * @param {String} date in format 'YYYY/MM/DD'\n   * @return {JSON} json object with info about the historical weather\n   */\n  async getHistoricalWeatherData(id, date) {\n    const apiEndpoint = `/api/location/${id}/${date}`;\n\n    const data = await fetchData(apiEndpoint);\n\n    return data;\n  }\n}\n","export default class AppLocalStorage {\n  /**\n  *  Method that allows to add an element to the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to add\n  * @param {String} value is a value we want to add\n  */\n  static set(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**\n  *  Method that allows to get an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to get\n  * @return {String} the current value associated with the given key, or null if the given key does not exist.\n  */\n  static get(key) {\n    try {\n      return JSON.parse(localStorage.getItem(key))\n    } catch (e) {\n      console.log(e);\n    }\n    return null;\n  }\n\n  /**\n  *  Method that allows to remove an element from the localStorage container\n  *  \n  * @param {String} key is a key of the value we want to remove\n  */\n  static remove(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n","export default class DomManipulation {\n  /**\n   * Sets 'this.elem' to an element with corresponding ID\n   * of the instantiated object.\n   * @param {string} elemID\n   */\n  constructor(elemID) {\n    this.elem = document.getElementById(elemID);\n  }\n\n  setText(text) {\n    this.elem.innerText = text;\n  }\n\n  setImage(imgPath) {\n    this.elem.src = imgPath;\n  }\n\n  /**\n   * Transforms the wind direction icon to\n   * reflect the wind direction data.\n   * @param {Number} direction\n   */\n  setWindIcon(direction) {\n    direction = direction + 90;\n    this.elem.style.transform = `rotate(${direction}deg)`;\n  }\n\n  /**\n   * Creates and sets options for selected element (eg. 'datalist')\n   * based on the items array 'title' property.\n   * @param {Array} itemList\n   */\n  setDatalistChildren(itemList) {\n    this.elem.innerHTML = '';\n\n    itemList.forEach((item) => {\n      const option = document.createElement('option');\n      option.value = item.title;\n      option.dataset.woeid = item.woeid;\n      this.elem.append(option);\n    });\n  }\n\n  /**\n   * Method responsible for hiding/showing elements,\n   * will be used to swap layouts.\n   */\n  toggleDisplay() {\n    this.elem.style.display =\n      this.elem.style.display === 'none' ? 'flex' : 'none';\n  }\n  reset() {\n    this.elem.value = '';\n  }\n\n  /**\n   * Method returns day name.\n   * @param {int} offset\n   * @returns One of days Name as string\n   */\n  setDay(offset) {\n    const today = new Date().getDay();\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n    let dayName = days[(today + offset) % 7];\n    return dayName;\n  }\n\n  /**\n   * Method returns month name.\n   * @returns One of month Name as string\n   */\n  setMonth() {\n    const today = new Date().getMonth();\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let monthName = months[today % 12];\n    return monthName;\n  }\n\n  /**\n   * Method puts data from JSON to HTML.\n   * @param {JSON} data\n   */\n  static setWeatherInfo = (data) => {\n    const dailyCityName = new DomManipulation('daily-city-name');\n    dailyCityName.setText(data.title);\n    const dailyCurrentTime = new DomManipulation('daily-current-time');\n    dailyCurrentTime.setText(data.time.substr(11, 5));\n    const abbr = new DomManipulation('daily-abbr');\n    abbr.setImage(\n      `https://www.metaweather.com/static/img/weather/${data.consolidated_weather[0].weather_state_abbr}.svg`,\n    );\n    const dailyTemp = new DomManipulation('daily-temp');\n    dailyTemp.setText(\n      `${parseInt(data.consolidated_weather[0].the_temp, 10)}°C`,\n    );\n    const dailyState = new DomManipulation('daily-state');\n    dailyState.setText(data.consolidated_weather[0].weather_state_name);\n    const dailyMin = new DomManipulation('daily-min');\n    dailyMin.setText(\n      `min: ${parseInt(data.consolidated_weather[0].min_temp, 10)}°C`,\n    );\n    const dailyMax = new DomManipulation('daily-max');\n    dailyMax.setText(\n      `max: ${parseInt(data.consolidated_weather[0].max_temp, 10)}°C`,\n    );\n    const dailyArrow = new DomManipulation('daily-arrow');\n    dailyArrow.setWindIcon(data.consolidated_weather[0].wind_direction);\n    const dailyWindSpeed = new DomManipulation('daily-wind-speed');\n    dailyWindSpeed.setText(\n      `${parseInt(data.consolidated_weather[0].wind_speed, 10)} mph`,\n    );\n    const lastUpdate = new DomManipulation('daily-update');\n    DomManipulation.setUpdatedTime(\n      lastUpdate,\n      data.consolidated_weather[0].created,\n    );\n    for (let day = 1; day < 6; day++) {\n      const abbr = new DomManipulation(`card${day}-abbr`);\n      const dailyTemp = new DomManipulation(`card${day}-temp`);\n      const dailyState = new DomManipulation(`card${day}-state`);\n      const dailyWindSpeed = new DomManipulation(`card${day}-wind`);\n      const dailyArrow = new DomManipulation(`card${day}-arrow`);\n      const dayName = new DomManipulation(`card${day}-day`);\n      abbr.setImage(\n        `https://www.metaweather.com/static/img/weather/${data.consolidated_weather[day].weather_state_abbr}.svg`,\n      );\n      dailyTemp.setText(\n        `${parseInt(data.consolidated_weather[day].the_temp, 10)}°C`,\n      );\n      dailyState.setText(data.consolidated_weather[day].weather_state_name);\n      dailyWindSpeed.setText(\n        `${parseInt(data.consolidated_weather[day].wind_speed, 10)} mph`,\n      );\n      dailyArrow.setWindIcon(data.consolidated_weather[day].wind_direction);\n      dayName.setText(dayName.setDay(day));\n    }\n  };\n\n  /**\n   *\n   * @param {DomManipulation} dailyUpdateObject\n   * @param {string} createdTime\n   */\n  static setUpdatedTime(dailyUpdateObject, createdTime) {\n    const timeNow = Date.now();\n    const infoCreatedTime = Date.parse(createdTime);\n    const duration = timeNow - infoCreatedTime;\n    let seconds = Math.floor((duration / 1000) % 60),\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n    hours = hours < 10 ? '0' + hours : hours;\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    dailyUpdateObject.setText(`Updated ${hours} hours ${minutes} minutes ago`);\n  }\n\n  /**\n   * Method puts data from JSON to HTML for local Data Info.\n   * @param {JSON} data\n   */\n  static setWarsawWeather(data) {\n    const localCityName = new DomManipulation('local-city');\n    localCityName.setText(data.title);\n    const localCurrentTime = new DomManipulation('local-date');\n    localCurrentTime.setText(\n      `${localCurrentTime.setDay(\n        0,\n      )} ${new Date().getDate()} ${localCurrentTime.setMonth()}`,\n    );\n    const localAbbr = new DomManipulation('local-abbr');\n    localAbbr.setImage(\n      `https://www.metaweather.com/static/img/weather/${data.consolidated_weather[0].weather_state_abbr}.svg`,\n    );\n    const localTemp = new DomManipulation('local-temp');\n    localTemp.setText(\n      `${parseInt(data.consolidated_weather[0].the_temp, 10)}°C`,\n    );\n    const localState = new DomManipulation('local-state');\n    localState.setText(`${data.consolidated_weather[0].weather_state_name}`);\n    const localTempMin = new DomManipulation('local-low');\n    localTempMin.setText(\n      `${parseInt(data.consolidated_weather[0].min_temp, 10)}°C`,\n    );\n    const localTempMax = new DomManipulation('local-high');\n    localTempMax.setText(\n      `${parseInt(data.consolidated_weather[0].max_temp, 10)}°C`,\n    );\n    const localWindSpeed = new DomManipulation('local-speed');\n    localWindSpeed.setText(\n      `${parseInt(data.consolidated_weather[0].wind_speed, 10)} mph`,\n    );\n  }\n\n  /**\n   * Method puts data from JSON to HTML for HomeView Data Info.\n   * @param {JSON} data\n   */\n  static setLastWeather(data) {\n    const homeCityName = new DomManipulation('home-city');\n    homeCityName.setText(data.title);\n    const homeCurrentTime = new DomManipulation('home-date');\n    homeCurrentTime.setText(\n      `${homeCurrentTime.setDay(\n        0,\n      )} ${new Date().getDate()} ${homeCurrentTime.setMonth()}`,\n    );\n    const homeTemp = new DomManipulation('home-temp');\n    homeTemp.setText(\n      `${parseInt(data.consolidated_weather[0].the_temp, 10)}°C`,\n    );\n    const homeTempMin = new DomManipulation('home-min');\n    homeTempMin.setText(\n      `${parseInt(data.consolidated_weather[0].min_temp, 10)}°C`,\n    );\n    const homeTempMax = new DomManipulation('home-max');\n    homeTempMax.setText(\n      `${parseInt(data.consolidated_weather[0].max_temp, 10)}°C`,\n    );\n    const homeWindSpeed = new DomManipulation('home-speed');\n    homeWindSpeed.setText(\n      `${parseInt(data.consolidated_weather[0].wind_speed, 10)} mph`,\n    );\n\n    const lastUpdateInfo = new DomManipulation('home-update-time');\n    const createdTime = data.consolidated_weather[0].created;\n    DomManipulation.setUpdatedTime(lastUpdateInfo, createdTime);\n  }\n\n  /**\n   * Sets display property of element passed by id in constructor\n   * @param {String} display\n   */\n  setDisplay(display) {\n    this.elem.style.display = display;\n  }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export default class SessionStorage {\n  /**\n   * The function sets the data in SessionStorage\n   * depends on the key and value pair\n   * @param {*} key\n   * @param {*} value\n   */\n  static set(key, value) {\n    try {\n      window.sessionStorage.setItem(key, JSON.stringify(value));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * If the key is defined in Session Storage, function\n   * returns the value, otherwise it returns null\n   * @param {String} key\n   * @returns {String}\n   */\n  static get(key) {\n    try {\n      return JSON.parse(window.sessionStorage.getItem(key));\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  }\n}\n","import DomManipulation from './DomManipulation';\nimport WeatherAPI from './weatherApi';\nimport AppLocalStorage from './appLocalStorage';\nimport SessionStorage from './sessionStorage';\n\nconst weather = new WeatherAPI();\nconst homeView = new DomManipulation('home-view');\nconst searchView = new DomManipulation('search-view');\nconst lastWeather = new DomManipulation('last-weather-info');\nconst pageLoadingSpinner = new DomManipulation('page-loadingSpinner');\n\n/**\n * navigateTo creates proper query string based on the passed data,\n * uses historyAPI to set appropriate URL for the user and calls render()\n * @param {string} action\n * @param {object} params\n */\nconst navigateTo = (action, params) => {\n  if (action !== 'search') {\n    history.replaceState(null, null, '/');\n  } else {\n    const usp = new URLSearchParams({ action: action, ...params });\n    if (params.id !== history.state?.woeid) {\n      history.pushState({ woeid: params.id }, null, `?${usp.toString()}`);\n    }\n  }\n  render();\n};\n\n/**\n * render based on the value of 'action' query switches to appropriate\n * view:\n * - searchView for any 'action' equal to anything other than 'search'\n * - homeView for all the other cases\n */\nconst render = async () => {\n  const usp = new URLSearchParams(window.location.search);\n  const id = usp.get('id');\n\n  if (usp.get('action') !== 'search') {\n    //display last location weather info (if it exists)\n    if (AppLocalStorage.get('lastWeather')) {\n      DomManipulation.setLastWeather(AppLocalStorage.get('lastWeather'));\n      lastWeather.setDisplay('flex');\n    } else {\n      lastWeather.setDisplay('none');\n    }\n\n    homeView.setDisplay('flex');\n    searchView.setDisplay('none');\n  } else {\n    pageLoadingSpinner.setDisplay('flex');\n\n    let weatherData;\n    let warsawData;\n\n    if (SessionStorage.get(id)) {\n      weatherData = SessionStorage.get(id);\n    } else {\n      weatherData = await weather.getWeatherData(id);\n      SessionStorage.set(id, weatherData);\n    }\n\n    AppLocalStorage.set('lastWeather', weatherData);\n\n    if (SessionStorage.get(523920)) {\n      warsawData = SessionStorage.get(523920);\n    } else {\n      warsawData = await weather.getWeatherData(523920);\n      SessionStorage.set(523920, warsawData);\n    }\n\n    setTimeout(() => {\n      DomManipulation.setWeatherInfo(weatherData);\n      DomManipulation.setWarsawWeather(warsawData);\n      pageLoadingSpinner.setDisplay('none');\n      homeView.setDisplay('none');\n      searchView.setDisplay('flex');\n    }, 500);\n  }\n};\n\nexport { navigateTo, render };\n","/**\n * search form - related\n */\n\nimport WeatherAPI from './weatherApi';\nimport DomManipulation from './DomManipulation';\nimport { navigateTo } from './router';\n/**\n * variable for easier manipulation of inputStatus\n */\nexport const INPUT_STATES = {\n  standby: 'standby',\n  error: 'error',\n  ready: 'ready',\n  loading: 'loading',\n  reload: 'reload',\n};\n\n/**\n * function verifies if the phrase in the input field matches some of the locations from API\n *\n * @param {array} cityList - array of locations given as a response from API\n * @param {DOM element} input - input which is currently being used in the app\n * @returns 'true' (if verification is positive) else 'false'\n */\nexport const verifyInput = (cityList, input) => {\n  const cityMatch = cityList.find(\n    ({ title }) => title.toLowerCase() === input.value.toLowerCase(),\n  );\n\n  if (cityMatch) {\n    input.dataset.currentWoeid = cityMatch.woeid; // setting 'dataset.currentWoeid' at input\n    input.dataset.currentCity = cityMatch.title; // setting 'dataset.currentCity' at input\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * function for updating icons in the search form\n *\n * @param {DOM element} searchBar - current search form which is being used in the app\n * @param {String} status - current input status ('standby', 'loading', etc.)\n */\nexport const updateSearchFormDisplay = (searchBar, status) => {\n  const icons = [...searchBar.querySelector('.search-icon-container').children];\n\n  icons.forEach((icon) => {\n    icon.classList.remove('active');\n  });\n\n  switch (status) {\n    case 'standby':\n      const standbyIcon = searchBar.querySelector('.fa-search');\n      standbyIcon.classList.add('active');\n\n      break;\n    case 'loading':\n      const loadingIcon = searchBar.querySelector('.lds-spinner');\n      loadingIcon.classList.add('active');\n\n      break;\n    case 'error':\n      const errorIcon = searchBar.querySelector('.fa-exclamation');\n      errorIcon.classList.add('active');\n\n      break;\n    case 'ready':\n      const readyIcon = searchBar.querySelector('.fa-check');\n      readyIcon.classList.add('active');\n\n      break;\n    case 'reload':\n      const reloadIcon = searchBar.querySelector('.fa-redo');\n      reloadIcon.classList.add('active');\n\n      break;\n    default:\n      console.log('unexpected input');\n  }\n};\n\n// debounce function\n// Originally inspired by  David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// `wait` milliseconds.\nexport const debounce = (func, wait) => {\n  let timeout;\n\n  return function execFunc(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\nexport let inputStatus = INPUT_STATES.standby;\nconst weather = new WeatherAPI();\n\n/**\n * function validate input phrase, manage search form updating and sends request to API\n *\n * @param {Object} e - DOM event object\n * @returns nothing\n */\n\nexport const handleInput = async (e) => {\n  const currentInput = e.target;\n  const currentSearchBar = e.target.closest('form');\n  const currentSearchInfo = currentSearchBar.querySelector(\n    '.search-info-container p',\n  );\n\n  currentSearchInfo.innerText = '';\n\n  if (!e.target.value) {\n    inputStatus = INPUT_STATES.standby;\n    updateSearchFormDisplay(currentSearchBar, inputStatus);\n    return;\n  }\n\n  inputStatus = INPUT_STATES.loading;\n  updateSearchFormDisplay(currentSearchBar, inputStatus);\n\n  try {\n    const res = await weather.getQueryLocations(e.target.value);\n    if (res.length < 1) {\n      console.log('No locations found');\n      inputStatus = INPUT_STATES.error;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n      currentSearchInfo.innerText = 'No results';\n\n      return;\n    }\n\n    const dataList = new DomManipulation('results');\n    dataList.setDatalistChildren(res);\n\n    if (verifyInput(res, currentInput)) {\n      inputStatus = INPUT_STATES.ready;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n    } else {\n      inputStatus = INPUT_STATES.standby;\n      updateSearchFormDisplay(currentSearchBar, inputStatus);\n    }\n  } catch (error) {\n    inputStatus = INPUT_STATES.reload;\n    updateSearchFormDisplay(currentSearchBar, inputStatus);\n    currentSearchInfo.innerText = 'Try again';\n  }\n};\n\nexport const clearInputBtn = (e) => {\n  const form = e.target.closest('form');\n  const input = form.querySelector('input');\n  const searchInfo = form.querySelector('.search-info-container p');\n\n  input.value = '';\n  inputStatus = INPUT_STATES.standby;\n  updateSearchFormDisplay(form, inputStatus);\n  searchInfo.innerText = '';\n};\n\n/**\n * function for reseting both forms\n * needs to be invoked whenever the app view changes\n */\nexport const resetForms = (e) => {\n  const form = e.target.closest('form');\n  const searchInfo = form.querySelector('.search-info-container p');\n  searchInfo.innerText = '';\n  \n  const homeSearchInput = new DomManipulation('home-input');\n  const dailySearchInput = new DomManipulation('daily-input');\n\n  const homeSearchBar = document.querySelector('.home-search-bar');\n  const dailySearchBar = document.querySelector('.daily-search-bar');\n\n  homeSearchInput.reset();\n  dailySearchInput.reset();\n\n  inputStatus = INPUT_STATES.standby;\n  updateSearchFormDisplay(homeSearchBar, inputStatus);\n  updateSearchFormDisplay(dailySearchBar, inputStatus);\n  navigateTo('', {});\n};\n","import WeatherAPI from './weatherApi';\nimport AppLocalStorage from './appLocalStorage';\nimport DomManipulation from './DomManipulation';\nimport {\n  handleInput,\n  debounce,\n  INPUT_STATES,\n  inputStatus,\n  updateSearchFormDisplay,\n  clearInputBtn,\n  resetForms,\n} from './utils';\nimport { navigateTo, render } from './router';\n\nconst weather = new WeatherAPI();\n\nconst homeSearchBar = document.querySelector('.home-search-bar');\nconst dailySearchBar = document.querySelector('.daily-search-bar');\n\nconst homeSearchInput = new DomManipulation('home-input');\nconst dailySearchInput = new DomManipulation('daily-input');\n\nconst clearBtns = document.querySelectorAll('.fa-times');\nconst reloadBtns = document.querySelectorAll('.fa-redo');\n\nconst searchView = new DomManipulation('search-view');\n\nsearchView.toggleDisplay();\n\nupdateSearchFormDisplay(homeSearchBar, inputStatus);\n\n/**\n * function checks if the input is OK and proceeds with the further actions for displaying weather\n *\n * @param {Object} e - DOM event object\n * @returns nothing\n */\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  if (inputStatus !== INPUT_STATES.ready) return;\n\n  let input = this.getElementsByTagName('input')[0];\n  if (!input.dataset.currentWoeid || !input.dataset.currentCity) return;\n\n  input.disabled = true;\n  navigateTo('search', {\n    id: input.dataset.currentWoeid,\n    title: input.dataset.currentCity,\n  });\n  input.disabled = false;\n  setTimeout(() => input.focus(), 750);\n}\n\n/**\n * event listeners for the search form on the home page\n */\nhomeSearchInput.elem.addEventListener('input', debounce(handleInput, 1000));\nhomeSearchBar.addEventListener('submit', handleSubmit);\n\n/**\n * event listeners for the search form on the datails page\n */\ndailySearchInput.elem.addEventListener('input', debounce(handleInput, 1000));\ndailySearchBar.addEventListener('submit', handleSubmit);\n\n/**\n * event listeners for clearing the input values after clicking the proper icon\n */\nclearBtns.forEach((btn) => {\n  btn.addEventListener('click', clearInputBtn);\n});\n\n/**\n * event listeners for reloading the page after clicking the proper icon\n */\nreloadBtns.forEach((btn) => {\n  btn.addEventListener('click', resetForms);\n});\n\n// Renders adequate view while traversing history\nwindow.addEventListener('popstate', render);\n// Renders adequate view on page load\ndocument.addEventListener('DOMContentLoaded', () => render());\n"],"names":["$5131289cb623a25c$var$fetchData","async","urlEndpoint","response","fetch","ok","Error","json","error","console","log","$5131289cb623a25c$export$2e2bcd8739ae039","name","apiEndpoint","id","id1","date","$f8f07c2ed12d7a90$export$2e2bcd8739ae039","static","key","value","localStorage","setItem","JSON","stringify","e","key1","parse","getItem","key2","removeItem","$af34c7bb6fef930c$export$2e2bcd8739ae039","setText","text","this","elem","innerText","setImage","imgPath","src","setWindIcon","direction","style","transform","setDatalistChildren","itemList","innerHTML","forEach","item","option","document","createElement","title","dataset","woeid","append","toggleDisplay","display","reset","setDay","offset","Date","getDay","setMonth","getMonth","dailyUpdateObject","createdTime","duration","now","seconds","Math","floor","minutes","hours","data2","localCurrentTime","getDate","consolidated_weather","weather_state_abbr","parseInt","the_temp","weather_state_name","min_temp","max_temp","wind_speed","data1","homeCurrentTime","lastUpdateInfo","created","setUpdatedTime","setDisplay","constructor","elemID","getElementById","obj","data","time","substr","wind_direction","lastUpdate","day","abbr","dailyTemp","dailyState","dailyWindSpeed","dailyArrow","dayName","Object","defineProperty","enumerable","configurable","writable","$ad876169269508d0$export$2e2bcd8739ae039","window","sessionStorage","$f1bcd561f2c178eb$var$weather","$f1bcd561f2c178eb$var$homeView","$f1bcd561f2c178eb$var$searchView","$f1bcd561f2c178eb$var$lastWeather","$f1bcd561f2c178eb$var$pageLoadingSpinner","$f1bcd561f2c178eb$export$971646e43cc4a11b","action","params","history","replaceState","ref","usp","URLSearchParams","state","pushState","toString","$f1bcd561f2c178eb$export$b3890eb0ae9dca99","location","search","get","setLastWeather","weatherData","warsawData","getWeatherData","set","setTimeout","setWeatherInfo","setWarsawWeather","$fe8af8a42c4a74bc$export$1482df4e2e8d1d5d","$fe8af8a42c4a74bc$export$3679f369258b0974","searchBar","status","querySelector","children","icon","classList","remove","add","$fe8af8a42c4a74bc$export$61fc7d43ac8f84b0","func","wait","timeout","args","clearTimeout","$fe8af8a42c4a74bc$export$a937bd8c76bf8790","$fe8af8a42c4a74bc$var$weather","$fe8af8a42c4a74bc$export$412508d679148d5c","currentInput","target","currentSearchBar","closest","currentSearchInfo","res","getQueryLocations","length","cityList","input","cityMatch","find","toLowerCase","currentWoeid","currentCity","$fe8af8a42c4a74bc$export$25b84c447cb753a4","$fe8af8a42c4a74bc$export$77934e1dad786cc1","form","searchInfo","$fe8af8a42c4a74bc$export$8001072053340d14","homeSearchInput","dailySearchInput","homeSearchBar","dailySearchBar","$ce77af30fc9a6e63$var$homeSearchBar","$ce77af30fc9a6e63$var$dailySearchBar","$ce77af30fc9a6e63$var$homeSearchInput","$ce77af30fc9a6e63$var$dailySearchInput","$ce77af30fc9a6e63$var$clearBtns","querySelectorAll","$ce77af30fc9a6e63$var$reloadBtns","$ce77af30fc9a6e63$var$handleSubmit","preventDefault","getElementsByTagName","disabled","focus","addEventListener","btn"],"version":3,"file":"index.60b0fbb4.js.map"}